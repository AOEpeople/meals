name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build-images:
    name: Build Docker images
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build changelog
        run: git log -n 20 --date=short --format=format:"%C(auto)%h %ad @%an %s" >> web/changelog.txt
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Pull docker images for cached builds
        run: |
          docker pull aoepeople/meals:latest
          docker pull aoepeople/meals:dev
      - name: Get Docker meta for production image
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: aoepeople/meals
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=edge,branch=master
      - name: Build and push production image
        id: build_latest
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            - aoepeople/meals:latest
      - name: Get Docker meta for development
        id: devmeta
        uses: docker/metadata-action@v3
        with:
          images: aoepeople/meals
          flavor: |
            suffix=-dev
          tags: |
            type=ref,event=branch
      - name: Build and push development image
        id: build_dev
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile.dev
          push: true
          tags: ${{ steps.devmeta.outputs.tags }}
          labels: ${{ steps.devmeta.outputs.labels }}
          cache-from: |
            - aoepeople/meals:dev
          build-args: |
            BASE_APP_IMAGE=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      - name: Debug images on runner
        run: docker images | grep aoepeople

  test-unit-functional:
    name: Run unit- and functional-tests
    needs: [ build-images ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test with docker compose
        run: |
          export COMPOSE_INTERACTIVE_NO_CLI=true
          docker-compose pull dev
          docker-compose up -d dev
          docker-compose exec -T dev composer install
          sleep 15
          docker-compose exec -T dev app/console doctrine:schema:update --env=test --force
          docker-compose exec -T dev mkdir -p app/build/logs/
          docker-compose exec -T dev bin/phpunit -d memory_limit=-1 -c app/config/commons/development/phpunit.xml
          docker-compose exec -T dev bash -c "find app/build -type f -regex '.*\.\(html\|xml\)' | xargs sed -i 's#/var/www/html/##g'"
          docker-compose down -v --remove-orphans
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v2.2.4
        if: always()
        with:
          name: reports
          path: app/build/
      - name: Publish unit-test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: app/build/logs/junit.xml

  test-cgl:
    name: PHPCodeSniffer
    if: "false" # temporarily disable CGL unless fixed
    needs: [ build-images ]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Test with docker compose
        run: |
          export COMPOSE_INTERACTIVE_NO_CLI=true
          docker-compose pull dev
          docker-compose up -d dev
          docker-compose exec -T dev mkdir -p app/build/logs/
          docker-compose exec -T dev bin/phpcs --extensions=php --standard=vendor/leaphub/phpcs-symfony2-standard/leaphub/phpcs/Symfony2/ -s --report=junit --report-file=app/build/logs/phpcs.xml src
          docker-compose exec -T dev bash -c "find app/build -type f -regex '.*\.\(html\|xml\)' | xargs sed -i 's#/var/www/html/##g'"
          docker-compose down -v --remove-orphans
      - name: Publish unit-test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: "PHPCodeSniffer"
          files: app/build/logs/phpcs.xml

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache bower_components
        uses: actions/cache@v2
        with:
          path: '**/bower_components'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bower.json') }}
      - name: Install npm packages
        working-directory: ./app/Resources
        run: yarn install
      - name: Run FE linters
        working-directory: ./app/Resources
        run: yarn lint

  phpmd:
    name: PHPMD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP environment
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          tools: phpmd
      - name: Run PHPMD
        run: phpmd src github ./app/config/commons/development/phpmd.xml --baseline-file ./phpmd.baseline.xml

  snyk:
    name: Scan vulnerabilities
    needs: [ build-images ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          args: --file=Dockerfile
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif

  deploy:
    name: Deploy and notify
    needs: [ test-unit-functional ]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to staging environment
        env:
          IMAGE_TAG: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          GITLAB_TRIGGER_TOKEN: ${{ secrets.GITLAB_TRIGGER_TOKEN }}
        run: |
          curl -X POST -F "ref=master" -F "variables[IMAGE_TAG]=$IMAGE_TAG" -F "token=$GITLAB_TRIGGER_TOKEN" https://gitlab.aoe.com/api/v4/projects/2718/trigger/pipeline
      - name: Notify team
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          MATTERMOST_HOOK_URL: ${{ secrets.MATTERMOST_HOOK_URL }}
        run: |
          curl -i -X POST -H 'Content-Type: application/json' -d '{"text": "Triggered deployment of meals-staging.aoe.com to `'"$GITHUB_SHA"'`\n '"$COMMIT_MSG"'"}' $MATTERMOST_HOOK_URL
