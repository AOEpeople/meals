security:
    encoders:
        IMAG\LdapBundle\User\LdapUser: plaintext
        Mealz\UserBundle\Entity\Login:
            algorithm:        sha1
            encode_as_base64: false
            iterations:       1

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER

    providers:
        default:
          chain:
              providers: [database]
        #ldap:
          # an extended imag_ldap.security.user.provider
          # id: mealz_user.security.user.provider
        database:
          entity: { class: Mealz\UserBundle\Entity\Login, property: username }

    firewalls:
        mealz:
            pattern: ^/
            anonymous: ~
            provider:         default
            # imag_ldap:        ~
            # alternative configuration
            # imag_ldap:
            #   login_path:   /ninja/login
            form_login:
                login_path:  MealzUserBundle_login
                check_path:  MealzUserBundle_checkLogin
            logout:
                path:   MealzUserBundle_logout
                target: /
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }

imag_ldap:
  client:
    host: %ldap_host%
    port: %ldap_port%
    skip_roles: True
    version: 3 # Optional
#    username: foo # Optional
#    password: bar # Optional
#    network_timeout: 10 # Optional
#    referrals_enabled: true # Optional
#    bind_username_before: true # Optional

  user_class: Mealz\UserBundle\User\LdapUser
  user:
    base_dn: %ldap_base_dn%
#    filter: (&(foo=bar)(ObjectClass=Person)) #Optional
    name_attribute: %ldap_name_attribute%
#  role:
#    base_dn: ou=group, dc=host, dc=foo
##    filter: (ou=group) #Optional
#    name_attribute: cn
#    user_attribute: member
#    user_id: [ dn or username ]