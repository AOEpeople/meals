security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    # required to hash user passwords
    encoders:
        App\Mealz\UserBundle\Entity\Login:
            algorithm: auto
            cost: 4
            time_cost: 3
            memory_cost: 10

    providers:
        oauth_user_provider:
            id: mealz.oauthuserprovider

        database:
            entity: { class: App\Mealz\UserBundle\Entity\Login, property: username }

    firewalls:
        assets:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # disable, i.e. comment out the complete 'dev' firewall config to use oauth authenticator on devbox
#        dev:
#            host: ^meals\.test$
#            provider: database
#            anonymous: lazy
#            form_login:
#                login_path: /login
#                check_path: /login
#            logout:
#                path: MealzUserBundle_logout
#                target: /

        main:
            provider: oauth_user_provider
            anonymous: lazy
            oauth:
                resource_owners:
                    meals: meals_login
                login_path: /connect/meals
                use_forward: true
                failure_path: /connect/meals

                oauth_user_provider:
                    service: mealz.oauthuserprovider
            logout:
                path: MealzUserBundle_logout
                # where to redirect after logout
                target: /
                success_handler: App\Mealz\UserBundle\Provider\LogoutSuccessHandler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Define role compositions, e.g. role ROLE_KITCHEN_STAFF includes ROLE_USER role
    # https://symfony.com/doc/4.4/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_ADMIN: [ROLE_KITCHEN_STAFF, ROLE_FINANCE]
        ROLE_KITCHEN_STAFF: ROLE_USER
        ROLE_FINANCE: ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    #
    # Anonymous access will only work if enabled in authentication listener
    # config, e.g. anonymous: ~, anonymous: lazy
    access_control:
        - { path: ^/login, roles: [IS_AUTHENTICATED_ANONYMOUSLY], host: ^meals\.test$ }
        - { path: ^/connect, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/guest, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/guest/api/dashboard, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/api/guest-invitation, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: '^/participation/slots-status/\d{4}-\d{2}-\d{2}$', roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: '^/participation/count-status/\d{4}-\d{2}-\d{2}$', roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/language-switch, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/css, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/js, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/images, roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/, roles: [ROLE_USER] }
