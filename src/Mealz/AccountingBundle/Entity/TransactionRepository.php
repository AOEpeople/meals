<?php

namespace App\Mealz\AccountingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use App\Mealz\UserBundle\Entity\Profile;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    const COLUMN_NAME = 'amount';

    /**
     * Get total amount of transactions. Prevent unnecessary ORM mapping.
     *
     * @param string $username
     * @return float
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getTotalAmount($username)
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder->select('SUM(t.amount) AS amount');
        $queryBuilder->andWhere('t.profile = :user');
        $queryBuilder->setParameter('user', $username);

        return floatval($queryBuilder->getQuery()->getSingleScalarResult());
    }

    /**
     * @param Profile $profile
     * @param int $limit
     * @return mixed
     */
    public function getLastSuccessfulTransactions(Profile $profile, $limit = null)
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder->select('t');
        $queryBuilder->andWhere('t.user = :user');
        $queryBuilder->setParameter('user', $profile);

        $queryBuilder->orderBy('t.date', 'desc');
        if (is_int($limit) === true) {
            $queryBuilder->setMaxResults($limit);
        }

        return $queryBuilder->getQuery()->execute();
    }


    /**
     * Get all successful transactions for period and profile
     *
     * @param \DateTime $minDate date from
     * @param \DateTime $maxDate date to
     * @param Profile $profile user profile
     *
     * @return Transaction[]
     */
    public function getSuccessfulTransactionsOnDays(\DateTime $minDate, \DateTime $maxDate, Profile $profile)
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder->select('t');

        $minDate = clone $minDate;
        $minDate->setTime(0, 0, 0);
        
        $queryBuilder->andWhere('t.date >= :minDate');
        $queryBuilder->andWhere('t.date <= :maxDate');
        $queryBuilder->setParameter('minDate', $minDate);
        $queryBuilder->setParameter('maxDate', $maxDate);

        $queryBuilder->andWhere('t.profile = :profile');
        $queryBuilder->setParameter('profile', $profile);

        $queryBuilder->orderBy('t.date', 'ASC');

        return $queryBuilder->getQuery()->execute();
    }

    /**
     * Get first name, last name and amount of transactions in the given time per user.
     *
     * @param \DateTime $minDate
     * @param \DateTime $maxDate
     * @param Profile $profile
     * @return array
     */
    public function findUserDataAndTransactionAmountForGivenPeriod(\DateTime $minDate = null, \DateTime $maxDate = null, $profile = null)
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder->select('p.username, p.firstName, p.name, t.paymethod, SUM(t.amount) AS amount');
        $queryBuilder->leftJoin('t.profile', 'p');

        if ($minDate instanceof \DateTime) {
            $queryBuilder->andWhere('t.date >= :minDate');
            $queryBuilder->setParameter('minDate', $minDate);
        }

        if ($maxDate instanceof \DateTime) {
            $queryBuilder->andWhere('t.date <= :maxDate');
            $queryBuilder->setParameter('maxDate', $maxDate);
        }

        if ($profile instanceof Profile) {
            $queryBuilder->andWhere('p.username = :username');
            $queryBuilder->setParameter('username', $profile->getUsername());
        }

        $queryBuilder->groupBy('p.username');
        $queryBuilder->orderBy('p.name, p.firstName');
        $queryResult = $queryBuilder->getQuery()->getArrayResult();

        $result = array();

        foreach ($queryResult as $item) {
            $result[$item['username']] = array(
                'firstName' => $item['firstName'],
                'name' => $item['name'],
                'amount' => $item['amount'],
                'paymethod' => $item['paymethod'],
            );
        }

        return $result;
    }

    /**
     * Returns all transactions that were made between the given dates.
     * @param \DateTime $minDate
     * @param \DateTime $maxDate
     * @return array
     */
    public function findAllTransactionsInDateRange(\DateTime $minDate, \DateTime $maxDate)
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder->select('t.date');

        $minDate = clone $minDate;
        $minDate->setTime(0, 0, 0);
        $maxDate = clone $maxDate;
        $maxDate->setTime(23, 59, 59);

        $queryBuilder->andWhere('t.date >= :minDate');
        $queryBuilder->andWhere('t.date <= :maxDate');
        $queryBuilder->setParameter('minDate', $minDate);
        $queryBuilder->setParameter('maxDate', $maxDate);

        $queryBuilder->orderBy('t.date', 'ASC');

        $queryResult = $queryBuilder->getQuery()->getArrayResult();

        $result = array();
        foreach ($queryResult as $item) {
            if (array_key_exists($item['date']->format('Y-m-d'), $result) === false) {
                $transactions = $this->getAllTransactionsOnDay($item['date']);
                if (empty($transactions) === false) {
                    $result[$item['date']->format('Y-m-d')] = $transactions;
                }
            }
        }

        return $result;
    }

    /**
     * Helper function for findAllTransactionsInDateRange()
     * @param \DateTime $day
     * @return array
     */
    private function getAllTransactionsOnDay(\DateTime $day)
    {
        // Get all dates where transactions were made
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder->select('t.amount, t.date, p.firstName, p.name');
        $queryBuilder->leftJoin('t.profile', 'p');

        $minDate = clone $day;
        $minDate->setTime(0, 0, 0);
        $maxDate = clone $day;
        $maxDate->setTime(23, 59, 59);

        $queryBuilder->andWhere('t.date >= :minDate');
        $queryBuilder->andWhere('t.date <= :maxDate');
        $queryBuilder->andWhere('t.paymethod IS NULL');
        $queryBuilder->setParameter('minDate', $minDate);
        $queryBuilder->setParameter('maxDate', $maxDate);

        $queryBuilder->orderBy('t.date', 'ASC');

        $queryResult = $queryBuilder->getQuery()->getArrayResult();

        $result = array();
        foreach ($queryResult as $item) {
            array_push($result, array(
                'amount' => $item['amount'],
                'date' => $item['date']->format('d.m.Y'),
                'firstName' => $item['firstName'],
                'name' => $item['name']
            ));
        }

        return $result;
    }
}
