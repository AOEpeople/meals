<?phpdeclare(strict_types=1);namespace App\Mealz\MealBundle\Event\Subscriber;use App\Mealz\MealBundle\Event\ParticipationUpdateEvent;use App\Mealz\MealBundle\Service\Publisher\PublisherInterface;use App\Mealz\MealBundle\Service\ParticipationService;use Psr\Log\LoggerInterface;use App\Mealz\MealBundle\Service\Publisher\Publisher;use Symfony\Component\EventDispatcher\EventSubscriberInterface;class ParticipationSubscriber implements EventSubscriberInterface{    private LoggerInterface $logger;    private PublisherInterface $publisher;    private ParticipationService $participationService;    public function __construct(        LoggerInterface $logger,        PublisherInterface $publisher,        ParticipationService $participationService    ) {        $this->logger = $logger;        $this->publisher = $publisher;        $this->participationService = $participationService;    }    public static function getSubscribedEvents(): array    {        return [            ParticipationUpdateEvent::class => 'onUpdate',        ];    }    public function onUpdate(ParticipationUpdateEvent $event): void    {        $meal = $event->getParticipant()->getMeal();        $ok = $this->publisher->publish(            Publisher::TOPIC_PARTICIPANT_COUNT,            [                'mealId' => $meal->getId(),                'count' => $this->participationService->getCountByMeal($meal),                'isAvailable' => $this->participationService->isAvailable($meal)            ]        );        if (!$ok) {            $this->logger->error('publish failure', ['topic' => Publisher::TOPIC_PARTICIPANT_COUNT]);        }    }}